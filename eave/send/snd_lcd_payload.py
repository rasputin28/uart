import serial
import time

# Configuration
SERIAL_PORT = '/dev/ttyAMA0'  # LCD TX line
BAUD_RATE = 16250
START_MARKER = 0xBE
END_MARKER = 0xFE

def create_packet(command_bytes):
    """Create a complete packet with start/end markers"""
    packet = bytearray([START_MARKER])
    packet.extend(command_bytes)
    packet.append(END_MARKER)
    return bytes(packet)

def send_complete_packet_stream():
    """Send the complete packet stream from logs"""
    print("Sending complete packet stream from LCD logs...")
    
    # Complete stream from your logs (packets 2-84)
    complete_stream = [
        [0xCC], [0xC2], [], [0xCC], [0xC2], [], [0xCC], [0xC2], [], [0xCC], [0x42], [],
        [0xCC], [0x42], [], [0xCC], [0x42], [], [0xCC], [0x42], [], [0xCC], [0xC2], [],
        [0xCC], [0xC2], [], [0xCC], [0xC2], [], [0xCC], [0xC2], [], [0xCC], [0xC2], [],
        [0xCC], [0xC2], [], [0xCC], [0x42], [], [0x42], [0x3E], [0xCC], [0x42], [],
        [], [0xCC], [0x4C, 0xFC, 0xF2, 0x82, 0xC2], [0xF0, 0xCE, 0x02], [0xCC], [0x42], [],
        [], [0x42], [], [0xCC], [0xCC, 0xFC, 0xF2, 0x1E, 0x42], [], [0x8C],
        [0x42, 0xDE, 0x7E, 0x40], [0xEE, 0xCE, 0x02], [0x04], [0x42], [], [0x0C],
        [0x42, 0x7E, 0x26, 0x40, 0xCE, 0x82] + [0x00] * 16, [0xCC, 0xFC, 0xF2, 0x8E, 0x42],
        [0xF0, 0xCE, 0x02], [0x42], [0xB6], [0x4C], [0x42], [], [0xC8],
        [0xCC, 0xF4, 0xF2, 0x3A, 0x42], [], [0xCC], [0xCC, 0xFC, 0xF2, 0x1E, 0xC2, 0x34, 0x7E, 0x40],
        [0xD0, 0xCE, 0x02], [0x42], [0xDE, 0xCE, 0x02], [0xCC], [0x42], [], [0xCC], [0x42]
    ]
    
    with serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1) as ser:
        for i, cmd in enumerate(complete_stream):
            if cmd:  # Skip empty packets
                packet = create_packet(cmd)
                print(f"Packet {i+2}: {' '.join(hex(b) for b in packet)}")
                ser.write(packet)
                ser.flush()
                time.sleep(0.125)  # Match timing from logs
    
    print("Complete packet stream sent!")

if __name__ == "__main__":
    send_complete_packet_stream()